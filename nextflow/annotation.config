// name this cohort/dataset
params.cohort = "cohort"

params.input_vcf_dir = "nextflow/inputs/individual_vcfs"
// the test data has a `vcf.gz` extension by default, but you can update here to use `vcg.bgz`
params.input_vcf_extension = "vcf.gz"

// output path for Cohort-specific results
params.cohort_output_dir = "nextflow/${params.cohort}_outputs"

// all outputs which are not specific to a cohort/family/analysis
params.processed_annotations = "nextflow/processed_annotations"

// to skip the merge-from-individual-vcfs step, and run on specifically provided data, use this argument
// I expect this file to be located with a corresponding tabix index (`XXX.tbi`)
// I am also assuming that when providing data this way, callset frequency INFO fields (AC/AF/AN) are populated already
params.merged_vcf = "UNDEFINED"

params.large_files = "large_files"
params.ref_genome = "${params.large_files}/ref.fa"

// path to Echtvar-formatted annotation data
// Download this file from https://zenodo.org/records/15222100
// This file does not need to be unzipped!
params.gnomad_zip = "${params.large_files}/gnomad_4.1_region_merged_GRCh38_whole_genome"

// MANE transcript resource
params.mane = "${params.large_files}/MANE.GRCh38.v1.4.summary.txt.gz"
// result file from running ParseManeIntoJson on the MANE summary file
params.mane_json = "${params.processed_annotations}/mane.json"

// Ensembl gene feature file
params.ensembl_gff = "${params.large_files}/Homo_sapiens.GRCh38.113.gff3.gz"
// result files from the CreateRoiFromGff3 nextflow module, implementing the CreateRoiFromGff3 script followed by a sort
params.ensembl_bed = "${params.processed_annotations}/GRCh38.bed"
params.ensembl_merged_bed = "${params.processed_annotations}/GRCh38_merged.bed"

// AlphaMissense file, downloadable from https://zenodo.org/records/8208688/files/AlphaMissense_hg38.tsv.gz
// or Google Cloud https://console.cloud.google.com/storage/browser/dm_alphamissense
params.alphamissense_tsv = "${params.large_files}/AlphaMissense_hg38.tsv.gz"
params.alphamissense_tar = "${params.processed_annotations}/alphamissense_38.ht"

// Docker image - built from Dockerfile in the root directory
// "docker build -t talos:8.0.0 ."
params.container = 'talos:8.0.0'
docker.enabled = true
