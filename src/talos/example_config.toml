[GeneratePanelData]
# the panelapp instance to use
panelapp = 'https://panelapp-aus.org/api/v1/panels'
# panel ID in that panelapp instance to use as a base, by default this is the 'Mendeliome'
default_panel = 137
# these genes are removed from the base panel, but will be included if they occur in a phenotype-matched panel
require_pheno_match = ['FLG', 'GJB2', 'F2', 'F5', 'HFE']
# genes to remove from any panel, matched or otherwise. Effectively a blacklist
forbidden_genes = ['a', 'list', 'of', 'forbidden', 'genes']  # symbols, ENSG, or a mix
# IDs of panels to apply to all participants in this analysis, regardless of phenotype
# must exist in the relevant panelapp instance
forced_panels = [1, 2, 3]

# integer, when parsing panel data, this value determines whether a gene is 'recent'
# we find the date each gene became Green/Ready, and if that is within X months of today
# we treat the gene as new. New/Recent genes are highlighted in the report with a Star next to the symbol
within_x_months = 6

[GeneratePanelData.manual_overrides]
# this section permits the manual addition of genes to the panel data
# each gene here will be folded into the panelapp data after standard API queries have taken place
# if the gene was already identified for this analysis, the MOI provided here will take precedent
# if the gene here was not identified through panelapp, a new entity will be added, and the panel ID
# associated with it will be the number zero (panel IDs must all be numeric, 0 is not in use)
[[GeneratePanelData.manual_overrides.genes]]
# this field is mandatory - the ENSG ID of the gene
ensg = 'ENSG0000012345'

# this field should be supplied, if omitted will default to Mono_And_Biallelic
moi = 'Biallelic'

# optional - if ommitted the gene symbol will be looked up in the Ensembl data
symbol = 'AGENE'

# optional
chrom = '1'

[ValidateMOI]

# callset AF filtering will only be applied to variants with this AC or higher
min_callset_ac_to_filter = 10

# Global frequency filter
# Applied to all variants regardless of MOI. Variants reported in ClinVar as P/LP are exempt from these filters
gnomad_max_af = 0.01
gnomad_sv_max_af = 0.03

# callset_* filters only apply to variants with a callset AC > min_callset_ac_to_filter.
callset_max_af = 0.01
callset_sv_max_af = 0.03

gnomad_max_homozygotes = 5
gnomad_max_hemizygotes = 5

# Dominant frequency filters - only applied to variants being considered for a dominant MOI.
# Variants reported in ClinVar as P/LP are exempt from these filters
dominant_gnomad_max_af = 0.00001
dominant_gnomad_sv_max_af = 0.01
dominant_gnomad_max_ac = 10
dominant_gnomad_max_homozygotes = 0

# callset_* filters only apply to variants with a callset AC > min_callset_ac_to_filter.
dominant_callset_max_af = 0.01
dominant_callset_sv_max_af = 0.01
dominant_callset_max_ac = 10

# Clinvar frequency filters
# Applied to variants reported as P/LP in clinvar
clinvar_gnomad_max_af = 0.05
clinvar_dominant_gnomad_max_af = 0.00005

# callset_* filters only apply to variants with a callset AC > min_callset_ac_to_filter.
clinvar_callset_max_af = 0.05
clinvar_dominant_callset_max_af = 0.05

ignore_categories = [ "exomiser", "svdb"]

# we dismiss variants where the proband doesn't have at least this much alt support
min_alt_depth = 5

# by default, only consider the top two exomiser results
exomiser_rank_threshold = 2

# optionally, ignore some categories at runtime
# entries in this list should be the final component of a category name
# e.g. categoryboolean6 -> "6"
# e.g. categorysample4 -> "4"
#ignore_categories = ['6']

# for these categories, require a phenotype-gene match
# this is the final part of the Category name, e.g. categorydetailspm5 is "pm5", and categorybooleansv1 is "sv1"
phenotype_match = ['6']

# all categories in this list are treated as support
# i.e. can appear as the second-hit, but will not independently be reported
# comp-het formations of two support variants are also removed
# all categories not in this list are treated as fully important
support_categories = ['5', '6']

[RunHailFiltering]
# variables affecting how the VCF variants are parsed, and AnalysisVariant objects are populated
csq_string = [ "consequence", "gene_id", "gene", "transcript", "mane_id", "mane", "biotype", "dna_change", "amino_acid_change", "codon", "ensp", "am_class", "am_pathogenicity",]

# variables for the hail operations, including CSQ sets and filter thresholds
ac_threshold = 0.01
additional_csq = ['missense']
af_semi_rare = 0.01
callset_af_sv_recessive = 0.03
critical_csq = [ "frameshift", "splice_acceptor", "splice_donor", "start_lost", "stop_gained", "stop_lost",]
spliceai = 0.5

[de_novo]
min_child_ab = 0.2
min_depth = 5
max_depth = 1000
min_gq = 25
min_alt_depth = 5

[RunHailFiltering.cores]
small_variants = 8

[categories]
1 = 'ClinVar Pathogenic'
3 = 'High Impact Variant'
4 = 'de Novo'
5 = 'High SpliceAI Score'
6 = 'AlphaMissense P/LP'
pm5 = 'ACMG PM5 - missense in same residue as known pathogenic'
svdb = 'SpliceVarDB Predicted Splice-Altering'
sv1 = 'Predicted LOF SV'
exomiser = 'Variant prioritised by Exomiser'

[CreateTalosHTML]
external_labels = "path to labels file"

[CreateTalosHTML.hyperlinks]
lookup = "e.g. gs://cpg-COHORT-test/reanalysis/parsed_seqr.json"
template = "e.g. https://seqr.populationgenomics.org.au/COHORT_project_id/.../{sample}"
variant_template = "e.g. https://seqr.populationgenomics.org.au/variant/{variant}/family/{sample}"

[HPOFlagging]
# this section relates to phenotype-matching the final variant set

# set this to True to do a semantic term comparison when phenotype matching
# this does a wiggly semantic similarity test between participant and gene HPOs, through SemSimian
# if False, we will always do a set intersection on HPO terms
semantic_match = true

# min similarity score when doing a semsimian termset similarity test
min_similarity = 14.0
