[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name='talos'
description='Centre for Population Genomics Variant Prioritisation'
readme = "README.md"
version='7.0.4'
requires-python = ">=3.10,<3.11"
license-files = ["LICENSE"]
classifiers=[
    'Environment :: Console',
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Operating System :: Unix',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
]

dependencies=[
    'hail>=0.2.133',
    'cloudpathlib[all]>=0.16.0',
    'cyvcf2>=0.30.18',
    'grpcio-status>=1.48,<1.50',
    'httpx>=0.27.0',
    'Jinja2>=3.1.3',
    'networkx>=3',
    'obonet>=1',
    'peds>=1.2.0',
    'phenopackets>=2',
    'protobuf==3.20.2',
    'pydantic>=2.5.2',
    'python-dateutil>=2',
    'semsimian',
    # peds has an explicit dependency on pkg_resources, so cannot be installed without setuptools
    'setuptools',
    'tabulate>=0.8.9',
    'tenacity>=9.0.0',
    'toml==0.10.2',
]

[project.optional-dependencies]
# various requirements when running cpg-flow/analysis-runner
cpg = [
    'cpg-flow>=v0.1.2',
    'google-cloud-storage==2.14.0',
    'gql',
    'metamist>=7.4.0'
]
test = [
    'bump2version',
    'black',
    'pre-commit',
    'pytest',
    'pytest-httpx',
    'pytest-xdist>=3.6.0',
]

[project.urls]
Repository = "https://github.com/populationgenomics/talos"

[project.scripts]
# ----------------------------------------------------------------------------------------
# these scripts are used during the annotation & data formatting pre-workflow
# ----------------------------------------------------------------------------------------
# Parse an Ensembl GFF3 file, output a BED file of gene regions
CreateRoiFromGff3 = 'talos.annotation_scripts.CreateRoiFromGff3:cli_main'
# Parse AlphaMissense into Hail Table
ParseAlphaMissenseIntoHt = 'talos.annotation_scripts.ParseAlphaMissenseIntoHt:cli_main'
# Parse MANE summary file into JSON
ParseManeIntoJson = 'talos.annotation_scripts.ParseManeIntoJson:cli_main'
# Reformats an annotated sites-only VCF into Table, adding additional annotations
ReformatAnnotatedVcfIntoHailTable = 'talos.annotation_scripts.ReformatAnnotatedVcfIntoHailTable:cli_main'
# Combines the annotations and the VCF into a MatrixTable
TransferAnnotationsToMatrixTable = 'talos.annotation_scripts.TransferAnnotationsToMatrixTable:cli_main'

# ----------------------------------------------------------------------------------------
# these scripts are specific to internal CPG functions
# ----------------------------------------------------------------------------------------
# sets off the whole workflow in cpg-flow orchestrated Stages
run_workflow = 'talos.cpg_internal_scripts.run_workflow:cli_main'
# Combine multiple separate Exomiser result files into a single Hail Table/JSON
AggregateExomiserVariantTsvs = 'talos.AggregateExomiserVariantTsvs:cli_main'
# Scans Metamist for published reports, collects into an index page
BuildReportIndexPage = 'talos.cpg_internal_scripts.BuildReportIndexPage:main'
# Create cohort phenopackets from Metamist
MakePhenopackets = 'talos.cpg_internal_scripts.MakePhenopackets:cli_main'
# Parse the summary JSON, generating a file for ingestion by Seqr
MinimiseOutputForSeqr = 'talos.cpg_internal_scripts.MinimiseOutputForSeqr:cli_main'

# ----------------------------------------------------------------------------------------
# these scripts are part of the core Talos workflow
# ----------------------------------------------------------------------------------------
# turns the SVDB TSV into a Hail Table
ConvertSpliceVarDb = 'talos.ConvertSpliceVarDb:cli_main'
# Builds cohort phenopackets from a pedigree with HPO terms
ConvertPedToPhenopackets = 'talos.ConvertPedToPhenopackets:cli_main'
# use the HPO terms to select panels for this analysis
GeneratePanelData = 'talos.GeneratePanelData:cli_main'
# query PanelApp for those selected panels
QueryPanelapp = 'talos.QueryPanelapp:cli_main'
# Filter and label a small-variant MatrixTable
RunHailFiltering = 'talos.RunHailFiltering:cli_main'
# Filter and label a SV MatrixTable
RunHailFilteringSV = 'talos.RunHailFilteringSv:cli_main'
# Run each of the category-labelled variants through MOI filters
ValidateMOI = 'talos.ValidateMOI:cli_main'
# catch variants which have strong phenotypic matches
HPOFlagging = 'talos.HPOFlagging:cli_main'
# Generate a HTML file from the report summary
CreateTalosHTML = 'talos.CreateTalosHTML:cli_main'
# Generate a brief summary of an existing report (variant count, family size, etc.)
SummariseReport = 'talos.SummariseReport:cli_main'

[tool.setuptools]
package-dir = {"" = "src"}

[options]
include_package_data = true

#[options.package_data]
#'talos'=  ['config_template.toml']

[tool.black]
line-length = 120
skip-string-normalization = true
exclude = '''
/(
  venv
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ['test']

[tool.ruff]
line-length = 120
extend-exclude = ["venv", ".mypy_cache", ".venv", "build", "dist"]

[tool.ruff.lint]
# ignore pydocstyle, flake8-boolean-trap (FBT)
select = ["A", "B", "C", "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

ignore = [
    "ANN001", # Missing type annotation for function argument
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204", # Missing type annotation for special method `__init__`
    "E731", # Do not assign a lambda expression, use a def
    "G004", # Logging statement uses f-string
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "Q000", # Single quotes found but double quotes preferred
    "S101", # Use of assert detected
    "PLR0912", # Too many branches (> 12)
    "PLR0913", # Too many arguments in function (> 5)
    "C901", # method is too complex (> 10 conditions)
    "N999", # invalid module name (not lower-case and potholes)
    "I001", # Import block is un-sorted or un-formatted (to remove soon)
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.format]
indent-style = 'space'
quote-style = "single"

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "hail", "cpg", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
cpg = ["metamist", "talos"]
hail = ["hail"]

[tool.ruff.lint.per-file-ignores]
# suppress the ARG002 "Unused method argument" warning in the stages.py file
## - we don't need generic cpg-flow arguments for every Stage, but need to fit the required method signature
"src/talos/cpg_internal_scripts/talos_stages.py" = ["ARG002"]
